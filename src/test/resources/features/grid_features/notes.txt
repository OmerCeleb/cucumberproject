***** Selenium Grid nOTES *****

1. Prerequisites
  * Java 11 or higher installed
  * Browser(s) installed
  * Browser driver(s)
  * Download the Selenium Server jar file from the latest release
  * Start the Grid
  * java -jar selenium-server-<version>.jar standalone
  * Point* your WebDriver tests to http://localhost:4444
  * (Optional) Check running tests and available capabilities by opening your browser at http://localhost:4444


-----------------------------------------------------------
2. Create a folder called SeleniumServer under project

----------------------------------------------------------
3. Download all below and move them to SeleniumServer folder. Make sure they are out of zip folders
    * Selenium Server: https://github.com/SeleniumHQ/selenium/releases/tag/selenium-4.17.0
    * Chrome driver: https://googlechromelabs.github.io/chrome-for-testing/#stable
    * Firefox driver(gecko): https://github.com/mozilla/geckodriver/releases

----------------------------------------------------------
4. Start the grid from intellij terminal
    1- From the terminal navigate to SeleniumServer folder

    * ls => lists all child folders in your project
    * cd command is used to change directory. We need to come into SeleniumServer folder, so use:
    * cd SeleniumServer

----------------------------------------------------------
5. Run tests from Selenium Grid Standalone note
    java -jar selenium-server-<version>.jar standalone (from the grid document). We need to provide the version we are used
    java -jar selenium-server-4.17.0.jar standalone

    Then we should see "Started Selenium Grid" message

    To stop running the Grid, use control c
    To start again, use the  java -jar selenium-server-4.17.0.jar standalone again

----------------------------------------------------------
6. Create a feature file under grid_feature folder
    @grid
    Feature: grid_feature
      Scenario: TC01_chrome_test
        Given user navigates to "https://github.com" using "chrome" browser
        Then verify the title contains "GitHub"
        And close the remote driver

-----------------------------------------------------------
7. Create GridRunner class and remove Hooks from there

NOTE: You can run the @grid from normal runner as well to create the step definitions

package runners;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(
        plugin = {
                "pretty",
                "html:target/cucumber-reports.html",
                "json:target/json-reports/cucumber.json",
                "junit:target/xml-reports/cucumber.xml",
                "rerun:target/failedRerun.txt",
                "com.avenstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"
        },
        monochrome = true,
        features = "./src/test/resources/features",
        glue = "stepdefinitions", // DO NOT USE HOOKS here. Because Hooks class has Driver.closeDriver(); which can create problem for remote driver
        dryRun = true,
        tags = "@grid"


)
public class GridRunner {



}


-----------------------------------------------------------
8. Create GridStepDefs class in step definitions folder






